service: hour-logger

frameworkVersion: '2'

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-west-1
  environment:
    userTable: ${env:userTable}-${self:provider.stage}
    requestsTable: ${env:reductionRequestsTable}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource: '*'

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true
    packager: 'yarn'
    excludeFiles: src/**/*.test.js

functions:
  pre-signup:
    handler: src/handlers/auth.preSignUpValidation
    memorySize: 128
    description: 'Sends a registration email'
    events:
      - http:
          path: /users/validate
          method: post
          cors: true

  create-user:
    handler: src/handlers/users.createUser
    memorySize: 128
    description: 'Creates user'
    events:
      - http:
          path: /users
          method: post
          # authorizer: aws_iam
          cors: true

  get-user:
    handler: src/handlers/users.getUser
    memorySize: 128
    description: 'Gets current user informations'
    events:
      - http:
          path: /users/{userId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                userId: true

  delete-user:
    handler: src/handlers/users.deleteUser
    memorySize: 128
    description: 'Deletes a user from the DynamoDB table'
    events:
      - http:
          path: /users/{userId}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                userId: true

  get-users:
    handler: src/handlers/users.getAllUsers
    memorySize: 128
    description: 'Gets all user information'
    events:
      - http:
          path: /users
          method: get
          cors: true

  check-in:
    handler: src/handlers/hours.checkIn
    memorySize: 128
    description: 'Creates new hour transaction'
    events:
      - http:
          path: /users/check-in
          method: post
          # authorizer: aws_iam
          cors: true

  update-hours:
    handler: src/handlers/hours.updateHours
    memorySize: 128
    description: 'Takes in checkIn and checkOut times and recalculates total hours completed'
    events:
      - http:
          path: /hours/update
          method: post
          # authorizer: aws_iam
          cors: true

  pretty-emails:
    handler: src/handlers/auth.customEmails
    memorySize: 128
    description: 'Sends a registration email'
    events:
      - http:
          path: /auth/register
          method: post
          cors: true

  create-reduction-request:
    handler: src/handlers/requests.create
    memorySize: 128
    description: 'Creates new hour reduction request'
    events:
      - http:
          path: /requests
          method: post
          # authorizer: aws_iam
          cors: true

  get-reduction-requests:
    handler: src/handlers/requests.get
    memorySize: 128
    description: 'Gets all reduction requests'
    events:
      - http:
          path: /requests
          method: get
          cors: true

  update-reduction-request:
    handler: src/handlers/requests.update
    memorySize: 128
    description: 'Update a reduction request'
    events:
      - http:
          path: /requests/{requestId}
          method: put
          cors: true
          request:
            parameters:
              paths:
                requestId: true

resources:
  Resources:
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
          - AttributeName: 'studentNumber'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
        GlobalSecondaryIndexes:
          - IndexName: StudentNumberIndex
            KeySchema:
              - AttributeName: studentNumber
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.userTable}
    RequestsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: 'requestId'
            AttributeType: 'S'
          - AttributeName: 'userId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'requestId'
            KeyType: 'HASH'
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.reductionRequestsTable}
